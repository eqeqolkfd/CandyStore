const {
  updateUserRole,
  sendPasswordResetEmail
} = require('../../../../features/users/users.service');

jest.mock('../../../../features/users/users.repository', () => ({
  setUserRole: jest.fn(),
  getUserByEmail: jest.fn(),
  getAdminEmail: jest.fn(),
  pool: {
    connect: jest.fn(),
    query: jest.fn()
  }
}));

jest.mock('nodemailer', () => ({
  createTransport: jest.fn()
}));

const {
  setUserRole,
  getUserByEmail,
  getAdminEmail,
  pool
} = require('../../../../features/users/users.repository');

const nodemailer = require('nodemailer');

describe('üë§ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò - –†–æ–ª–∏', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    process.env.SMTP_HOST = 'smtp.test.com';
    process.env.SMTP_PORT = '587';
    process.env.SMTP_SECURE = 'false';
    process.env.SMTP_USER = 'test@test.com';
    process.env.SMTP_PASS = 'testpass';
  });

  describe('üëë –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', () => {
    test('‚úÖ –¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
      const mockUpdated = { user_id: 1, role: 'manager' };
      setUserRole.mockResolvedValue(mockUpdated);

      const result = await updateUserRole({
        userId: 1,
        role: 'manager'
      });

      expect(setUserRole).toHaveBeenCalledWith(1, 'manager');
      expect(result).toEqual(mockUpdated);
    });

    test('‚úÖ –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ä–æ–ª–∏ –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞', async () => {
      const mockUpdated = { user_id: 1, role: 'admin' };
      setUserRole.mockResolvedValue(mockUpdated);

      const result = await updateUserRole({
        userId: 1,
        role: 'ADMIN'
      });

      expect(setUserRole).toHaveBeenCalledWith(1, 'admin');
      expect(result).toEqual(mockUpdated);
    });

    test('‚úÖ –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π —Ä–æ–ª–∏', async () => {
      await expect(updateUserRole({
        userId: 1,
        role: 'invalid_role'
      })).rejects.toThrow('Invalid role');
    });

    test('‚úÖ –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ userId', async () => {
      await expect(updateUserRole({
        role: 'admin'
      })).rejects.toThrow('userId required');
    });

    test('‚úÖ –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–π —Ä–æ–ª–∏', async () => {
      await expect(updateUserRole({
        userId: 1
      })).rejects.toThrow('role required');
    });

    test('‚úÖ –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—Å–µ –≤–∞–ª–∏–¥–Ω—ã–µ —Ä–æ–ª–∏', async () => {
      const validRoles = ['client', 'manager', 'admin'];
      
      for (const role of validRoles) {
        const mockUpdated = { user_id: 1, role };
        setUserRole.mockResolvedValue(mockUpdated);

        const result = await updateUserRole({
          userId: 1,
          role
        });

        expect(result.role).toBe(role);
      }
    });
  });

  describe('üìß –û—Ç–ø—Ä–∞–≤–∫–∞ email –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è', () => {
    test('‚úÖ –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å email –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –∫–ª–∏–µ–Ω—Ç—É', async () => {
      const mockUser = {
        user_id: 1,
        first_name: 'John',
        email: 'john@test.com',
        role: 'client'
      };
      const mockClient = {
        query: jest.fn(),
        release: jest.fn()
      };
      const mockAdminEmail = 'admin@test.com';
      const mockTransporter = {
        sendMail: jest.fn()
      };

      getUserByEmail.mockResolvedValue(mockUser);
      pool.connect.mockResolvedValue(mockClient);
      getAdminEmail.mockResolvedValue(mockAdminEmail);
      nodemailer.createTransport.mockReturnValue(mockTransporter);

      mockClient.query.mockResolvedValue({});

      const result = await sendPasswordResetEmail('john@test.com');

      expect(result.success).toBe(true);
      expect(result.message).toContain('–ü–∏—Å—å–º–æ —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      expect(mockTransporter.sendMail).toHaveBeenCalled();
    });

    test('‚úÖ –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
      getUserByEmail.mockResolvedValue(null);

      await expect(sendPasswordResetEmail('nonexistent@test.com'))
        .rejects.toThrow('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω');
    });

    test('‚úÖ –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –Ω–µ-–∫–ª–∏–µ–Ω—Ç–∞', async () => {
      const mockUser = {
        user_id: 1,
        first_name: 'Admin',
        email: 'admin@test.com',
        role: 'admin'
      };

      getUserByEmail.mockResolvedValue(mockUser);

      await expect(sendPasswordResetEmail('admin@test.com'))
        .rejects.toThrow('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤');
    });

    test('‚úÖ –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–∞—Ä–æ–ª—è', async () => {
      const mockUser = {
        user_id: 1,
        first_name: 'John',
        email: 'john@test.com',
        role: 'client'
      };
      const mockClient = {
        query: jest.fn(),
        release: jest.fn()
      };
      const error = new Error('Database connection failed');

      getUserByEmail.mockResolvedValue(mockUser);
      pool.connect.mockResolvedValue(mockClient);
      mockClient.query.mockRejectedValue(error);

      await expect(sendPasswordResetEmail('john@test.com'))
        .rejects.toThrow('Database connection failed');
    });

    test('‚úÖ –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ email', async () => {
      const mockUser = {
        user_id: 1,
        first_name: 'John',
        email: 'john@test.com',
        role: 'client'
      };
      const mockClient = {
        query: jest.fn(),
        release: jest.fn()
      };
      const mockAdminEmail = 'admin@test.com';
      const mockTransporter = {
        sendMail: jest.fn()
      };

      getUserByEmail.mockResolvedValue(mockUser);
      pool.connect.mockResolvedValue(mockClient);
      getAdminEmail.mockResolvedValue(mockAdminEmail);
      nodemailer.createTransport.mockReturnValue(mockTransporter);

      mockClient.query.mockResolvedValue({});
      mockTransporter.sendMail.mockRejectedValue(new Error('SMTP error'));

      const result = await sendPasswordResetEmail('john@test.com');

      expect(result.success).toBe(true);
      expect(result.message).toContain('–ü–∏—Å—å–º–æ —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    });
  });
});
